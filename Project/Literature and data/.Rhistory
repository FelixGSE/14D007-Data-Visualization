K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
}
compute.states()
N  = 100
x0 = c(3,2)
D  = diag(2) * c(0.5,0.2)
R  = diag(2) * c( 2, 1 )
A  = matrix( c(0,3,0,0), 2, 2)
B  = matrix( c(4,2,0,1), 2, 2)
C  = c( 5, 0 )
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
w
w      <- rmvnorm( 100 , mean = mu , sigma = D )
w
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
N  = 100
x0 = c(3,2)
D  = diag(2) * c(0.5,0.2)
R  = diag(2) * c( 2, 1 )
A  = matrix( c(0,3,0,0), 2, 2)
B  = matrix( c(4,2,0,1), 2, 2)
C  = c( 5, 0 )
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
w      <- rmvnorm( 1 , mean = mu , sigma = D )
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
}
compute.states()
N  = 100
x0 = c(3,2)
D  = diag(2) * c(0.5,0.2)
R  = diag(2) * c( 2, 1 )
A  = matrix( c(0,3,0,0), 2, 2)
B  = matrix( c(4,2,0,1), 2, 2)
C  = c( 5, 0 )
# Set mean for disturbance
mu      <- c( 0 , 0 )
# Initialize storage objets and set corresponding starting conditions
x       <- matrix( NA , nrow = N , ncol = 2 )
x[1,]   <- x0
Q       <- C %*% t(C)
K       <- list()
K[[N]]  <- Q
L       <- list()
# Compute K and L matrices
for (k in (N-1):1){
K[[k]] <-   t(A) %*% ( K[[(k+1)]] - K[[(k+1)]] %*% B %*% solve( t(B) %*% K[[(k+1)]] %*% B + R ) %*% t(B) %*% K[[(k+1)]] ) %*% A + Q
L[[k]] <- - solve( t(B) %*% K[[(k+1)]] %*% B + R) %*% t(B) %*% K[[(k+1)]] %*% A
}
# Solve for the states
w      <- rmvnorm( 100 , mean = mu , sigma = D )
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
}
compute.states()
w      <- rmvnorm( 100 , mean = mu , sigma = D )
w
for( k in 2:N ){
u.temp <- L[[(k - 1)]] %*% x[(k-1),]
x[k,]  <- A %*% AM( x[(k-1),] ) + B %*% u.temp + AM(w[(k-1),])
}
x
matrix( c(0,3,0,0), 2, 2)
matrix( c(4,2,0,1), 2, 2)
install.packages("TMVA")
source('centrality_functions.R')
setwd('/Users/felix/Documents/GSE/Term 2/14D007 Data Visualization/Project/Analysis/')
setwd('/Users/felix/Documents/GSE/Term 2/14D007 Data Visualization/Project/Analysis/')
### Load Packages
### Initialize auxilliary functions
source('centrality_functions.R')
################################################################################
################################################################################
# Author:       Felix Gutmann
# Programm:     Barcelona graduate school of economics - M.S. Data Science
# Course:       14D007 Data Visualization
# Last update:
# Decription:   This file computes
################################################################################
### Preamble
################################################################################
### Clear workspace
rm(list = ls())
### Set working directory
setwd('/Users/felix/Documents/GSE/Term 2/14D007 Data Visualization/Project/Analysis/')
### Load Packages
### Initialize auxilliary functions
source('centrality_functions.R')
### Load data
iot    <- read.csv( 'iot_clean.csv', sep = ';', header = FALSE )
sector <- read.csv( 'product_groups.csv', sep = ';', header = FALSE )
################################################################################
# Covert adjacency matrix to d3 format
################################################################################
# Compute binary adjacency matrix
adjacency.matrix <- ifelse(iot>0,1,0)
# Initialize empty edge list
N         <- nrow(adjacency.matrix)
edge.list <- c(NA)
# Compute edge list for java script
for( i in 1:N){
# Compute out list for node i
temp.out.list <- adjacency.matrix[i,]
# Loop over adjacent nodes j of node i
for( j in 1:N ){
# If there is an edge append to list
if(  temp.out.list[j] != 0 ){
edge <- paste0('{ source:',i,', target:',j,'},')
current.index <- length(edge.list) + 1
edge.list[current.index] <- edge
}
}
# Last iteration add no comma
if( i == N ){
last.index <- current.index - 1
edge.list[last.index] <- paste0('{ source:',i,', target:',j,'}')
edge.list <- edge.list[2:last.index]
}
}
# Initialize node list and iteration
M <- nrow(sector)
node.list <- c()
# Compute and format nodes
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),'},'),
paste0('{ name:',sQuote(sector[i,1]),'}')
)
}
# Remove quotes
node.list <- noquote(node.list)
# Design final output
open   <- "var dataset = {nodes: ["
bridge <-  "],edges: ["
close  <- "]};"
graph  <- noquote( c( open , node.list , bridge , edge.list , close ) )
# Save data to HD
write(graph,'var_data.js')
################################################################################
# Compute centrality data
################################################################################
################################################################################
################################################################################
in.centrality <- colSums(adjacency.matrix)
in.centrality
in.centrality <- as.numeric(colSums(adjacency.matrix))
in.centrality
node.list
paste0(c("var", name, "=",in.centrality,collapse=','))
name='d'
paste0(c("var", name, "=",in.centrality,collapse=','))
paste0("var", name, "=",in.centrality,collapse=',')
paste0(in.centrality,collapse=',')
name = 'var'
values <- paste0(in.centrality,collapse=',')
paste0("var", name , "=",values)
paste0("var", name , "= [ ",values,']')
paste0("var", , name , "= [ ",values,']')
paste("var" , name , "= [ ",values,']')
toJSarray <- function( name = 'var', data = NULL ){
values   <- paste0(data,collapse=',')
variable <- paste( "var" , name , "= [ ", values , ']' )
return( variable )
}
toJSarray('in',in.centrality)
toJSarray <- function( name = 'data', data = NULL ){
values   <- paste0(data,collapse=',')
variable <- paste( "var" , name , "= [ ", values , ']' )
return( noquote(variable) )
}
toJSarray('in',in.centrality)
in.centrality <- toJSarray('in', as.numeric(colSums(adjacency.matrix)) )
cm.in <- toJSarray('in',in.centrality)
write(cm.in,'in.js')
# In Centrality - for testing
in.centrality
in.centrality <- as.numeric(colSums(adjacency.matrix))
in.centrality
log(in.centrality)
in.centrality <- ifelse(as.numeric(colSums(adjacency.matrix))==Inf,0)
in.centrality <- ifelse(as.numeric(colSums(adjacency.matrix))==-Inf,0)
in.centrality <- as.numeric(colSums(adjacency.matrix))
in.temp       <- ifelse(in.centrality==-Inf,0,in.centrality)
in.temp
in.temp       <- ifelse(log(in.centrality)==-Inf,0,in.centrality)
in.temp
in.centrality <- log(as.numeric(colSums(adjacency.matrix)))
in.temp       <- ifelse(in.centrality==-Inf,0,in.centrality)
in.temp
in.cm         <- toJSarray('in',in.centrality)
write(cm.in,'in.js')
in.cm
in.temp       <- ifelse(in.centrality==-Inf,0,in.centrality)
in.cm         <- toJSarray('in',in.centrality)
in.cm         <- toJSarray('in',in.temp)
in.cm
write(in.cm,'in.js')
setwd('/Users/felix/Documents/GSE/Term 2/14D007 Data Visualization/Project/App/data/')
in.cm         <- toJSarray('ind',in.temp)
write(in.cm,'in.js')
in.centrality <- log(as.numeric(colSums(adjacency.matrix))) *10
in.temp       <- ifelse(in.centrality==-Inf,0,in.centrality)
in.cm         <- toJSarray('ind',in.temp)
write(in.cm,'in.js')
in.cm
in.temp       <- ifelse(in.centrality==-Inf,2,in.centrality)
in.cm         <- toJSarray('ind',in.temp)
write(in.cm,'in.js')
in.temp       <- ifelse(in.centrality==-Inf,0,in.centrality)
in.temp
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),',in:',in.temp[i],'},'),
paste0('{ name:',sQuote(sector[i,1]),',in:',in.temp[i],'}')
)
}
node.list <- noquote(node.list)
# Design final output
open   <- "var dataset = {nodes: ["
bridge <-  "],edges: ["
close  <- "]};"
graph  <- noquote( c( open , node.list , bridge , edge.list , close ) )
graph
head(graph)
write(graph,'var_data.js')
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),',ind:',in.temp[i],'},'),
paste0('{ name:',sQuote(sector[i,1]),',ind:',in.temp[i],'}')
)
}
# Remove quotes
node.list <- noquote(node.list)
# Design final output
open   <- "var dataset = {nodes: ["
bridge <-  "],edges: ["
close  <- "]};"
graph  <- noquote( c( open , node.list , bridge , edge.list , close ) )
# Save data to HD
write(graph,'var_data.js')
write(graph,'graph_data.js')
head(graph)
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),'},'),
paste0('{ name:',sQuote(sector[i,1]),'}')
)
}
# Remove quotes
node.list <- noquote(node.list)
# Design final output
open   <- "var dataset = {nodes: ["
bridge <-  "],edges: ["
close  <- "]};"
graph  <- noquote( c( open , node.list , bridge , edge.list , close ) )
# Save data to HD
write(graph,'var_data.js')
write(graph,'graph_data.js')
graph
head(graph)
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),'},'),
paste0('{ name:',sQuote(sector[i,1]),'}')
)
}
# Remove quotes
node.list <- noquote(node.list)
head(node.list)
sQuote("ads")
DQuote("ads")
sQuote('2')
sQuote("s2")
dQuote("s2")
dQuote(s2)
dQuote('a')
sQuote('a')
options(useFancyQuotes = FALSE)
cat("\ndistinguish plain", sQuote("single"), "and",
dQuote("double"), "quotes\n")
options(useFancyQuotes = TRUE)
cat("\ndistinguish plain", sQuote("single"), "and",
dQuote("double"), "quotes\n")
options( useFancyQuotes = FALSE )
# Compute and format nodes
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),'},'),
paste0('{ name:',sQuote(sector[i,1]),'}')
)
}
# Remove quotes
node.list <- noquote(node.list)
node.list
# Compute and format nodes
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),'ind',in.temp[i],'},'),
paste0('{ name:',sQuote(sector[i,1]),,'ind',in.temp[i],'}')
)
}
# Remove quotes
node.list <- noquote(node.list)
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),'ind',in.temp[i],'},'),
paste0('{ name:',sQuote(sector[i,1]),'ind',in.temp[i],'}')
)
}
# Remove quotes
node.list <- noquote(node.list)
node.list
M <- nrow(sector)
node.list <- c()
in.centrality <- log(as.numeric(colSums(adjacency.matrix)))
in.temp       <- ifelse(in.centrality==-Inf,0,in.centrality)
# Compute and format nodes
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),'ind:',in.temp[i],'},'),
paste0('{ name:',sQuote(sector[i,1]),'ind:',in.temp[i],'}')
)
}
# Remove quotes
node.list <- noquote(node.list)
node.list
M <- nrow(sector)
node.list <- c()
in.centrality <- log(as.numeric(colSums(adjacency.matrix)))
in.temp       <- ifelse(in.centrality==-Inf,0,in.centrality)
# Compute and format nodes
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),',ind:',in.temp[i],'},'),
paste0('{ name:',sQuote(sector[i,1]),',ind:',in.temp[i],'}')
)
}
# Remove quotes
node.list <- noquote(node.list)
node.list
# Design final output
open   <- "var dataset = {nodes: ["
bridge <-  "],edges: ["
close  <- "]};"
graph  <- noquote( c( open , node.list , bridge , edge.list , close ) )
# Save data to HD
write(graph,'graph_data.js')
for( i in 1:N){
# Compute out list for node i
temp.out.list <- adjacency.matrix[i,]
# Loop over adjacent nodes j of node i
for( j in 1:N ){
# If there is an edge append to list
if(  temp.out.list[j] != 0 ){
edge <- paste0('{ source:',(i-1),', target:',(j-1),'},')
current.index <- length(edge.list) + 1
edge.list[current.index] <- edge
}
}
# Last iteration add no comma
if( i == N ){
last.index <- current.index - 1
edge.list[last.index] <- paste0('{ source:',(i-1),', target:',(j-1),'}')
edge.list <- edge.list[2:last.index]
}
}
# Initialize node list and iteration
M <- nrow(sector)
node.list <- c()
in.centrality <- log(as.numeric(colSums(adjacency.matrix)))
in.temp       <- ifelse(in.centrality==-Inf,0,in.centrality)
# Compute and format nodes
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),',ind:',in.temp[i],'},'),
paste0('{ name:',sQuote(sector[i,1]),',ind:',in.temp[i],'}')
)
}
# Remove quotes
node.list <- noquote(node.list)
# Design final output
open   <- "var dataset = {nodes: ["
bridge <-  "],edges: ["
close  <- "]};"
graph  <- noquote( c( open , node.list , bridge , edge.list , close ) )
# Save data to HD
graph
head(graph)
write(graph,'graph_data.js')
### Clear workspace
rm(list = ls())
### Load data
setwd('/Users/felix/Documents/GSE/Term 2/14D007 Data Visualization/Project/Analysis/')
iot    <- read.csv( 'iot_clean.csv', sep = ';', header = FALSE )
sector <- read.csv( 'product_groups.csv', sep = ';', header = FALSE )
### Load Packages
### Set options
options( useFancyQuotes = FALSE )
### Initialize auxilliary functions
source('centrality_functions.R')
### Reset working directory for output
setwd('/Users/felix/Documents/GSE/Term 2/14D007 Data Visualization/Project/App/data/')
################################################################################
# Covert adjacency matrix to d3 format
################################################################################
# Compute binary adjacency matrix
adjacency.matrix <- ifelse(iot>0,1,0)
# Initialize empty edge list
N         <- nrow(adjacency.matrix)
edge.list <- c(NA)
# Compute edge list for java script
for( i in 1:N){
# Compute out list for node i
temp.out.list <- adjacency.matrix[i,]
# Loop over adjacent nodes j of node i
for( j in 1:N ){
# If there is an edge append to list
if(  temp.out.list[j] != 0 ){
edge <- paste0('{ source:',(i-1),', target:',(j-1),'},')
current.index <- length(edge.list) + 1
edge.list[current.index] <- edge
}
}
# Last iteration add no comma
if( i == N ){
last.index <- current.index - 1
edge.list[last.index] <- paste0('{ source:',(i-1),', target:',(j-1),'}')
edge.list <- edge.list[2:last.index]
}
}
# Initialize node list and iteration
M <- nrow(sector)
node.list <- c()
in.centrality <- log(as.numeric(colSums(adjacency.matrix)))
in.temp       <- ifelse(in.centrality==-Inf,0,in.centrality)
# Compute and format nodes
for( i in 1:M ){
node.list[i] <- ifelse( i < M,
paste0('{ name:',sQuote(sector[i,1]),',ind:',in.temp[i],'},'),
paste0('{ name:',sQuote(sector[i,1]),',ind:',in.temp[i],'}')
)
}
# Remove quotes
node.list <- noquote(node.list)
# Design final output
open   <- "var dataset = { nodes: ["
bridge <-  "],edges: ["
close  <- "]};"
graph  <- noquote( c( open , node.list , bridge , edge.list , close ) )
# Save data to HD
write(graph,'graph_data.js')
demand <- read.csv( 'final_demand.csv', sep = ';', header = FALSE )
setwd('/Users/felix/Documents/GSE/Term 2/14D007 Data Visualization/Project/Analysis/')
demand <- read.csv( 'final_demand.csv', sep = ';', header = FALSE )
demand
demand <- read.csv( 'final_demand.csv', sep = ';', header = FALSE,
col.names = paste0("V",2:66) )
setwd('/Users/felix/Documents/GSE/Term 2/14D007 Data Visualization/Project/Literature and data/')
iot    <- read.csv( 'iot_clean.csv', sep = ';', header = FALSE )
